hello,
everyone!
guy
see
hear
share.

greg
boulric
00:01:59
yeah,
can.

mq
quraishi
00:02:00
bull.
okay.
today'
lectur
probabl
go
short
one,
actually.
opinion,
talk
one
mayb
way
creat
architectures,
best
way
go
through.
know
last
lectur
talk
model
architectur
style
pattern
use
way
web
architectur
document
histor
share
one
better
way
techniques.
gonna
review
today.
know,
make
interactive.
always,
love
hear
opinion
go
lectur
reviewing,
gone
through.
first
off,
want
mention
first
assign
1.
one
assign
fulli
graded.
think
one
still
progress
work
through.
guy
follow
calendar,
necessarili
order
cours
assign
laid
out.
look
calendar,
it'll
tell
assign
due
look
at,
reorder
it.
look
order
cours
assignments,
project
assign
actual
deliver
1,
2,
3,
4.
pretti
clear.
order
pretti
clear.
cours
assign
order.
notic
you.
not,
know.
folk
join
lectur
probabl
ones,
work
wrong
assignment,
notic
that.
look
alway
look
calendar,
calendar
put
someth
due
change.
gonna
chang
ti
either.
notic
know
week
noth
due
purpose.
either
give
time
catch
up.
fallen
behind.
give
time
even
work
o
overal
cours
assign
architectur
develop
model
architectur
presentation.
reason
ahead
game.
know,
work
main
cours
assignments,
see
cover
take
big
chunk
deliver
due
course.
right?
one
thing,
also
wanna
point
next
assign
architectur
decis
record
architectur
decis
record
make
sense,
actual
effect
commun
alreadi
whether
drawn
piec
paper,
whatev
is.
alreadi
architectur
think
choic
decis
made
right.
then,
within
context
overal
architecture,
adr
actual
gonna
may
actual
gonna
make
sense.
even
though
adr
due
share
architectur
kind
purpos
make
realiz
document
architecture,
actual
go
decis
actual
come
someth
want
share
know
variou
stakeholders.
make
sure
ad
random,
then,
architectur
model
document
gonna
share.
gonna
present
adr
actual
connect
architectur
gonna
doing?
go
ahead.
zach.

zak
seipel
00:05:41
curios
adr.
so,
example,
mayb
ask
before,
3
class
once.
forgiv
me.
adr
someth
like,
diagram
use
kubernetes.
diagram
use
lambdas.
go
use
lambda
issu
cold
starts.
logic
behind
that.
realli
document
are.
like.
kind
meet
backend
engin
meet
notes.
way.

mq
quraishi
00:06:17
good
exampl
adr.
now,
document
talk
about,
know
great
gonna
help
actual
get
lot
detail
adr,
want
adr
high
level
either,
design
actual
help
document
case
may
want
one
concern
performance.
use
example.
you,
actual
document
implement
poc
get
decis
say,
oh,
know.
xyz.
techniqu
slow.
gonna
use
land
busi
right?
reason.
approach
perfectli
valid
approach.
one,
opinion,
find
be.
know.
accur
case
adr.
follow
architectur
alreadi
document
tri
out.
come
before.

zak
seipel
00:07:23
thank
you.

mq
quraishi
00:07:24
nice.
hopefully,
lab
clear.
know,
stop
question
go
lecture.
get
started.
now.
alright.
talk
web
architectures.
okay,
we're.
might
alreadi
seen
lot
experiences.
lot
gonna
pretti
basic
point
to,
know.
talk
web
architectur
detail
pro
con
thing
like
that.
whether
pro
con
clear,
documented.
way
use
specif
techniques.
clear?
know,
forward
point.
purpose,
make
clear
architectur
headed.
comparison
differ
architectur
thing
like
that.
right?
realli
dive
detail
web
web
architectur
work
thing
like
that.
mostli
related.
context
course,
should.
need
view
lot
go
go
today.
know,
progress
okay.
first,
tcp,
ip.
make
sure.
network
1960
s.
know
turn
actual
first
occurr
know
network
comput
look
like,
the,
know.
modern
day
internet
kind
evolv
from.
talk
differ
web
architectures,
see
start
versu
are,
remark
progression,
right.
lot
advanc
sinc
tim
burns,
tim
bernic
know
sort
world
wide
web
introduc
talk
yeah,
went
lot
http
http
type
protocols.
1
point
o
version
protocol
websit
built
lot
work
start
what?
90,
95,
littl
bit
that.
go
back
time,
look
are.
essenti
web
1.0
started,
web
2
are.
lot
stuff
day
blockchain
side
exampl
web
3.0.
lot
adoption,
standard
still
emerging.
review
again,
yeah,
1989,
1990,
we,
actual
took
the,
know,
even
tim
bernersley
wrote
proposal.
took
eventu
get
first
website,
know,
http,
protocol
util
real
world.
start
1989,
propos
got
accepted.
today
facebook
twitter
x,
whatev
right?
easi
get
got
found
way
commun
approach.
want
document
variou
point
architectur
it.
know.
got
us
today.
progress
was,
hey,
1
point
oh
1990.
adopt
realli
started.
993,
mayb
95.
start.
see,
realli
catch
fire?
basic
web
pages.
html,
like
earli
form
java
servic
came
web
website.
like
point
8
java
actually,
start
work
servlet
point
8,
whole
thing
need
plugin
web
server
book
serbl
book
back
end
get
data
web
pages.
evolv
web
2.0,
today
got
lot
social
media
use
it.
nativ
nativ
os'
run
phones.
video
high
qualiti
pictures.
know.
lot
web,
2.0
reli
high
speed
commun
well.
fact
go
1
one
part
world
anoth
part
world
quick
access
cloud.
web
2.0
includ
lot
that.
lot
standards.
seen
alreadi
see
exampl
semant
web
today.
ton
there.
nft
blockchain,
lot
stuff.
ai,
still
evolving.
see
exampl
already.
web.
3.0.
interoperability,
ai
part
it.
vr
ar
meta
versu
alreadi
see
exampl
that.
web
evolving.
standard
eminent.
slide
means.
even
though
ton
stuff
there.
point
exampl
rep
3.0
take
long
time
standard
adopt
differ
entiti
actual
agre
standards.
read-onli
web
architectur
web
1.0
right?
web
browser
make
request
web
server.
file
system
know
hold
onto
jpeg
gift
html
file
render
web
page.
dynam
content,
interact
user.
request
response.
right?
make
request.
get
respons
back.
cacheabl
indexable.
came
cgi
part
webin.
know
web
architectur
common
gateway
interface.
actual
allow
run
scripts.
kind
evolv
mechan
today,
like
react
framework
things.
cgi
common,
cgi's.
program
could.
plugins.
even
run
web
server
talk
written
ci
use
write
mine
c.
know,
work
pretti
well,
scalabl
architecture,
time,
either,
best
thing
do.
web
browser
make
request
web
server.
get
cgi
script,
providing,
know,
whatev
web
server
request
get
data
databas
provid
back
web
browser.
now,
thing
want
to.
want
to.
look,
way
pictur
commun
level
detail.
pretti
high,
level
picture.
box
arrows,
get
point
across.
audienc
tri
th.
pictur
meant
audienc
tri
understand.
know
what?
common
gateway
interfac
work
high
level?
right?
look
perspective.
know.
okay
from,
know,
whoever
document
way.
seem
get
point
across.
web
architect.
overal
architectur
diagram.
probabl
one
small
compon
within
it.
evolut
cgi,
way,
java
service.
php,
differ
web
frameworks.
heard
jangl
framework
rails.
evolut
use
cgi.
pretti
pretti
simpl
way
get
know,
get
data
web
forms.
right?
think
cgi
someth
facilit
commun
web
server
backend.
get
introduc
javascript.
now,
javascript
someth
go
run
web
browser.
function.
everyth
still
technic
back
end.
go
perform
implications.
architectur
evolv
into.
see
differ
2
pictures,
resourc
manag
work
here.
then,
give
javascript
engin
web
browser
side.
web
browser
sudden
get
smarter,
run
code
your,
know,
everi
user'
web
browser.
essentially,
taken
lot
web
server
workload
shift
client.
look
workload
sharing,
also
look
get
web
page
dynam
now.
fact
abl
run
code
client
side
commun
back
end
cgi
scripts.
anoth
evolution.
1.0
minor
revs.
web
architecture.
see
evolv
evolv
quickly.
4
year
went
start
from,
simpl
browser
call
web
server.
get
data
back
come
engin
run
web
browser
web
server,
taken
cgi
part
convert
entir
applic
server.
right?
abil
apach
tomcat
exampl
that.
abil
run
lot
complic
logic.
know
lot
better
java
code
thing
applic
server
side.
so,
know.
evolv
architecture.
becom
dynam
nature.
go
back
depict
architecture,
model
perspective,
still
essenti
number
boxes.
abl
commun
lot
more.
document
specif
areas.
high
level
commun
architectur
evolv
next
level
architectur
pictur
go
deeper
applic
server
works,
break
out.
mayb
go
databas
see
break
out.
web
server
architecture.
know
gonna
get
communicated.
high
level
abl
to.
talk
that.
entir
application.
lifecycl
within
web
app.
gone
singl
thread
app
potenti
lot
state
multi-threading.
model
view
control
framework.
right?
one
previou
lectures,
talk
talk
mbc.
worked.
essenti
take
applic
server
get
point
hey,
gonna
take
lot
code
running.
go
shift
web
browser
view
essentially.
view
go
commun
model.
control
run
applic
server
side.
right?
case
action
go
controller.
control
look
model
model
updat
view
refresh
view.
still
issu
nbc
framework,
see,
architectur
involv
go
evolv
someth
scale
better
flux.
flux
pattern
go
exampl
talk
minutes.
gonna
help
make
architecture,
know
execut
lot
code
even
efficient.
taken
fact
nbc
model
view
control
pattern.
modular
service.
code.
run
larger
applications,
mani
models.
mayb
controllers,
mani
views.
replac
html
markup
file
deal.
pre-compil
speed
base
configur
variou
components,
actual
alter
behavior.
lot
dynam
control.
dynam
dynam
word
application.
know,
provid
configur
base
code
execution.
right?
take
hard
code
item
previou
examples,
put
configur
file
struct
pattern.
ever
wanted.
want
know
detail
apach
struts,
work
while.
one
way
lot
configuration,
lot
control
drive
configur
applic
server
extern
file
deploy
specif
configuration.
one
way
gonna
shut
camera
think
network
start
slow
down.
okay?
anyway.
consid
improvement.
also
challenge.
configur
file
control
code
executes.
applic
gets.
know,
complex,
configur
file
becom
hard
manage.
anyway.
web
1.0
exist
15
year
way
2,005.
started,
read-onli
content.
support,
know,
reason
size
applications,
scale
web
architecture,
know,
support
basic
web
architectures.
introduc
model
view
control
pattern
develop,
know,
develop
web
centric
applications.
then.
know,
still
miss
ton
stuff
want
do.
so.
start
2,005,
2,006,
pattern
architectur
start
shift
web
2.0
side.
model
was.
hey?
ton
work
done
web
server
web
application.
mani
layer
complic
architecture.
simplifi
it?
well,
enhanc
standard
web
2.0,
actual
allow
run
entir
applic
part
applic
mobil
devic
browser
internet
things.
get
applic
split
mani
layer
potenti
run
front
end
client
side.
data
api
call
happen
back
end.
quit
shift
2,005,
2,006,
see
vrs.
with.
differ
applic
built
sinc
then.
web
2.0
actual
assist
lot
that.
lot
of.
know
technolog
space
softwar
space,
lot
advanc
come
concept
work
provid
know.
step
forward,
provid
evolut
one
set
compon
architectur
advanced,
case
xml.
http
request
xhdr.
microsoft
develop
internet
explorer.
end
happen
googl
end
see
complet
differ
usag
xml
http
decid
decid
creat
javascript
librari
compat
it,
led
gmail
googl
maps.
end
happen
end
becom
enabl
web
2.0.
allow
shift
client
lot
code
run
nativ
oper
system
like
io
android
right?
allow
evolut
occur.
shift
is.
last
thing
look
model
view
control
run
applic
server
web.
one
dot
4
was,
know,
reach
probabl
tip
point.
we?
move
forward
that,
get
web
2
point
xhtr.
oops.
think
slide
cut
shift
somehow.
sorri
that.
look
sudden
now.
know
familiar
ajax,
asynchron
javascript,
stand
for.
ajax
allow
see
facebook
today
is,
opinion,
evolut
someth
like
ajax,
because.
see
is,
mani
compon
run
page.
either
interact
interact
them,
updat
refresh
themselves.
like
one
thing
ajax,
right?
ajax
actual
allow
actual
have.
you're.
actual
behind
scene
read
data
back
end
system
web
server
web
page
loaded.
mani
compon
web
page.
past.
use
take
long
time
page
like
even
load,
tri
get
data
refresh
everi
segment
web
page.
well,
brought
data
back?
user
interact
specif
part
web
page.
right?
want
abil
actual
updat
page
without
reload
page,
load
segment
page
updated.
ajax
allow
interact
with.
web
page
4
compon
it,
look
profil
information.
next
compon
know
account
inform
interact
it.
account
inform
part
web
page.
gonna
go
get
data.
interact
it,
gonna
send
request
behind
scene
go
get
data
popul
segment
web
page.
essenti
ajax
allow
do.
use
x
hdr.
know
thing
microsoft
end
develop
90,
90,
90,
98,
someth
like
that.
end
happen
browser
run
callbacks.
user
interface,
interact
something.
still
run
browser.
browser
callback
say,
gonna
go
get
data
server
side.
receiv
data,
gonna
call
back
user
interface.
use
async
architectur
wait
get
data.
then,
soon
request
get
data,
receiv
function
call
back
data
receiv
pretti
pretti
cool.
like,
still
rememb
ajax
came
out,
like
hottest
thing,
allow
us
interact
behind
scenes,
entir
client
loaded,
our,
know,
present
users,
take
15
load.
sudden,
second
see
everything,
everi
segment
web
page
actual
refresh
user
interact
it.
see
2
differ
way
commun
page.
one
picture,
allow
one
pictur
show
main
compon
without
dive
much
deeper
it.
talk
type
call
made
data
returned,
also
portray
sequenc
diagram
left
one
right.
look
like
activ
diagram.
know,
mayb
is.
realli
follow
uml
standard.
commun
us
web
browser
make
http
request.
webexml
server
meant
backend
process
access
database.
actual
return
html
page
javascript,
style
sheet
ajax
engin
it.
then,
interact
web
page.
commun
ajax
engin
make
request,
get
data
post
html
page.
high
level,
abl
commun
singl
page
architectur
working.
exactli
singl
page
architecture,
singl
spa
base
this,
type
architecture.
enabl
web
2.0
compar
web
1
point?
oh,
went
static
web
page
go
user'
website.
talk
thing
like.
mayb
company'
website,
static
content
web.
1
point
evolv
allow
dynam
content.
go
web
2.0.
allow
run
full-featur
applic
use
web
protocols.
multipl
clients.
mobil
apps.
iot
devic
right?
evolut
pretti
signific
web
2.
stay
web
2
quit
number
year
saw
web
3.0
present
us
coupl
year
ago.
web
2.0
underlying.
went
1
point
o.
http
1.0
http
2
abl
differ
type
payload
well
http
2.
also
mqtt.
protocol
use
commun
iot
devic
embed
within
web.
2
point
application.
gonna
gonna
get
littl
bit.
use
thing
web.
right?
allow
allow
us
that.
look
mobil
phone
today.
made
possibl
2,006,
evolut
web
2.0.
come
quit
long
ways.
2,005.
architectur
becam
sudden
pretty,
signific
complex.
again,
complex
see
cloud
architectur
days.
still
pretty.
still
someth
right?
mani
new
compon
here.
content
provid
browser
download
applic
code,
either
web
server
content
deliveri
network.
cloud
cdn
content
deliveri
network
essenti
provid
content
quicker
cach
you.
cdn
today'
cloud
use
quit
bit
cdn,
applic
deploy
us.
use
cdn,
actual
front
end
run
in.
instance.
know
china.
reach
applic
run
us
cash
client
code
china
make
applic
faster.
right?
content.
distribut
network
example.
talk
exampl
content
distribut
network.
architectur
allow
us
kind
download
application.
download
executed.
whole
thing
run
web,
browser.
applic
make
request
acdp,
use
api
go
still
ajax
framework.
2.0
introduct
web
applic
firewalls,
aw
cloud
call
waf
lovingly.
meant
security.
captur
lot
firewal
rule
prevent
denial
servic
attack
talk
into,
allow
certain
proxi
abl
commun
apis.
lot
rule
captured.
even
get
api
gateway.
go
ton
security.
case
still
challenges.
look
advanc
previou
pictur
one,
web
browser,
content
distribut
cloud.
dynam
part
applic
commun
api
go
get
data
present.
know,
whatev
compon
user
interact
with.
control
firewall.
one
use
xml
json
download
content.
quit
signific
improv
evolut
1
point
1
point
stop
dynam
applic
2.0,
know
go
to.
evolv
into.
cannot.
almost
see
head
toward
ajax.
head
toward
singl
page.
applic
architecture.
know
facebook
twitter,
consid
sp
everyth
there,
scroll,
content
refreshes.
know,
depend
app
special
configur
are,
content
gear
toward
user
itself,
base
done
past.
lot
personalization.
lot
dynam
content
interact
base
personalization.
evolut
2
given
us
2,006
even
today.
right?
iot
devic
popular.
mani
way
to,
know,
connect
differ
compon
use
bluetooth
protocols.
sort
allow
us
scale
web
architecture,
know,
10
fold.
almost
like
want
old
simpl
day
come
back.
gotten
complex
now,
right?
also
rich
allow
user
interactions,
like
seen
first
started.
monet
lot
idea
develop
actual
come
start
with,
get
more?
get
peopl
log
to?
monet
doing?
sell
product
get
base
using?
web
3.0
semant
site
creep
today
web.
2.0
architecture,
even
though
semant
web
fall
web
3
point.
oh.
see
web
2
deploy
today.
right?
mix
bag.
evolut
web
2
eventu
take
us
web
3
point
gonna
still
work
like
mentioned.
singl
page
applic
get
differ
framework
allow
bit.
see
architectur
still
box
lines.
ad
lot
components.
ad
security.
actual
dive
web
applic
firewal
works.
least
tell
certain
requir
single-pag
applic
go
firewal
commun
apis.
mobil
app
thing.
api
servic
multipl
clients,
iot
devic
it.
context
call
drive
api
runtim
return
server
commun
well
low
power
arrow
indic
essenti
use
protocol
like
bluetooth.
introduct
iphon
android
phones.
angular
frameworks.
question
far?
okay?
high
level
web
1.0
deliv
rich
content
web
2.0
end
becoming,
know,
use
thing
internet?
so.
done
architecture,
applic
code.
evolv
architectur
say
applic
code.
want
find
way
run
client.
facebook,
exampl
that,
run
browser,
laptop
desktop.
code
run
deliv
facebook,
right?
applic
run
local
client.
allows.
know,
even
though
server
volum
server
facebook
network
data
center
still,
cloud
still
pretti
large.
also
done
includ
me,
desktop,
client,
mix
applic
code
run
local
well.
api
end
support
data
interact
remot
interactions.
singl
page
applications,
right?
you.
talk
ajax,
talk
variou
compon
web
page.
refresh
get
data
interact
them.
scrolled.
sp
are,
actually,
see
go
go
applic
run
ajax
singl
page.
application.
actual
go
applic
use
today,
like,
know
x,
facebook
instagram,
whatev
compon
even
ads,
ad
base
are,
from,
like
log
also
from.
look
thing
like
browse.
lot
special
monet
come
lot
components.
web
browser
focus
secur
lay
different.
lay
style
page
right?
go
use
pc.
store
things,
got
javascript
engineag
actual
web
pages,
compon
web
compon
are.
know
be.
everi
compon
style.
look
feel
code
javascript
tyscript,
manag
behavior.
event
framework
behind
scene
compon
talk
backend
systems.
end
look
like
is.
look
pictur
communicating.
one
tri
explain
us
sp
work
right?
essenti
commun
specif
stakeholders.
document
evolut
web
architectures.
one
slide
mayb
use
twice.
goe
explain
detail
architectur
go
share
soon.
right?
necessarili
architectur
picture.
high,
level
way
explain
peopl
gonna
see
complex
architectur
diagram
share
toward
end.
high
level
architectur
diagram
dive
compon
component,
like,
know,
spa
tooling.
go
drill
deeper
libraries,
part
it,
packag
part
go
deeper
event
manag
work
within
spa
framework.
is,
know,
commun
that.
slide
actual
tell
us
sb
complic
right,
becom
complic
years.
work
react
angular.
work
skeld
view.
work
reactor
angular,
know
talk
evolut
singl
page.
applic
react
good
exampl
that.
event
driven
event
type
interaction.
time-based.
focus,
base
scroll
through,
some,
know,
click
event
right?
type.
way
way
gonna
work
is,
gonna
event
go
network.
way
store,
state
look
were,
someth
interact
backend.
compon
talk
well.
so,
dive
littl
bit
deeper
compon
talk.
gonna
get
variou
differ
compon
interact
models.
talk
case,
start
callback
referenc
earlier
callback
essenti
function
function
arguments.
function
call
completes.
essenti
give
way
call
back
parent.
parent
call
child
compon
tell
child
component.
done,
call
function
tell
state.
successful?
finish?
failure?
callback
pretti
common
way.
lot
compon
interact
other.
sba
architecture.
essenti
parent
compon
talk
child.
anoth
exampl
know,
essenti
callback
work
javascript
runtim
libraries.
next
evolut
callback
promis
model.
promis
essenti
callback.
end
happen
hell
issu
refer
hell
issue,
essentially,
essenti
meant
mani
callback
occurring.
everi
callback
get
respons
back
parent
could.
nest
deep
code
becom
hard
maintain
debug,
mani
callbacks.
function
go
get
call
back
anoth
one
go
get
call
back.
anoth
one
go
get
call
back,
time
complet
chain
anyth
happen
stack
call
initiated.
promis
model
meant
resolv
essenti
promis
object
where.
complet
way
repres
failur
state,
done
asynchronously.
code,
essenti
structur
handl
asynchron
code.
chain
everything.
someth
happens,
something,
someth
otherwis
catch
someth
else.
log
errors.
sort
make
good
way
return
errors.
say
asynchronous,
call
promising,
evolv
much
better,
commonli
wide
use
ase
away.
evolut
promises.
body?
it.
promis
code
promis
code
get
tricki
because.
write
lot
async
code,
get
hard
debug
even
maintain.
async
await
allow
us
essenti
built
top
promis
to.
write
synchron
code
style
write
synth
code.
actual
async.
way
works.
essenti
say
is.
hey,
gonna
function
make
call.
gonna
also
wait
function
complete.
right?
sound
like
synchronous,
actual
execut
asynchron
way.
syntact
sugar
promis
code.
look
behav
like
sinkford.
realli
use
function
await
wait
paus
execut
promis
completes.
mani
async
operations.
come
handy.
right?
we,
refer
flux
facebook
use
begin
flux
evolut
model
view
control
pattern.
actual
use
lot
async
awaid
features.
right?
essenti
model
view
controller.
realli
go
tailspin
mani
model
commun
mani
views.
allow
us
store
state
refer
store.
dispatch
tell
action
do,
base
interact
views.
sort
split
everyth
up.
yeah,
facebook
use
model
actual
solv
lot
model
view
control
stack,
stack
problem
mani
calls,
mani
models,
interact
mani
view
becom
hard
debug
manag
time.
pretti
common
pattern.
instead
use
mvc,
lot
peopl
use
this,
talk
nbc
last
lectur
previou
lecture.
okay?
rep
2,
right?
talk
about,
evolved.
talk
talk
cloud
nativ
architectures.
essenti
today.
lot
architectur
cloud,
whether
aw
azur
googl
done
give.
give
abil
use
mobil
apps.
browsers.
iot'
secur
place
go
firewalls,
put
api
gateway.
essenti
kubernet
model.
api,
know.
api
gateway
either
api
data
api
specif
applic
features.
everyth
manag
configurations.
web
2
allow
us
to,
allow
us
get
complex
web
nativ
architectures.
go
jump
lot
compon
here,
pretty.
know,
go
it.
talk
variou
area
concern,
whether
network,
whether
authentication.
prevent
data
getting.
know,
encrypt
it.
somebodi
actual
read
data
wire.
make
sure
send
data
secure,
time
isol
suspici
traffic
traffic
make
sure
compon
interact
compon
network.
part
network
part
somebodi
else'
network.
talk
waf
put
lot
secur
place
thing
like
denial
servic
attack
sql.
inject
things.
essenti
firewall.
alright.
not.
transit
1.0
2.0.
go
transit
3.0
may
still
earli
talk
3.0
detail.
but,
like
said,
alreadi
seen
ton
exampl
3.0
actual
interact
today,
whether
ai
vr
stuff.
lot
vendor
web
days,
blockchain
exampl
that,
too.
what?
end
happen
web
web
2.0
saw
googles,
facebook,
netflix
amazon.
guy
take
advantag
help
us
evolv
web.
2.
architecture.
saw
evolut
banks,
insur
compani
entertain
provid
got
pretti
creativ
api
support
mani
differ
front
ends.
bank
applic
work
make
mobil
phone,
browser,
anyth
else.
even
watch
days.
right
so.
bluetooth
approach
devic
detect
watch
right?
stuff
like
lot
quick
commun
happening.
made
possibl
evolut
web
2.0
architecture.
talk
security.
talk
secur
quickly,
like
everi
everyth
authent
authorized,
base
proxi
server
ldap
credenti
past
right.
past
provid
user
id
password.
check
credenti
ldap
store
come
back
say,
hey,
know
are.
make
call
access
something.
make
sure
author
you,
allow
access
api.
alway
public
api
unauthent
user
access.
secur
way
things.
user
id
password
driven.
even
share
header,
make
it.
know
someth
breach
easily.
you,
kinda
know,
weak
here,
right?
slide
talk
about.
weak
mani
fronts.
kind
led
us
the,
know,
evolut
model
oat
model.
still
use
today.
token
base
mostli
meant
authorizations.
level
authent
get
guest
first
go
get
token,
token
use
token
use
author
get
resources.
tamperproof.
wide
use
protocol.
fast.
efficient,
secure.
oat
model
work?
well.
pictur
commun
mani
differ
perspectives.
right?
first,
talk
talk
compon
interacting.
client.
api
gateway.
api
gateway
let
get
specif
api
run
web
services,
web
servic
platform,
ident
provid
abil
authent
you.
also
give
appropri
token
use
actual
author
get
resources.
client
requesting.
2.0,
know
2
point
request
initi
client.
whether
mobil
app.
whether
smart
tv
desktop,
initi
request
get
token
client
request
authorization.
suppli
client
id,
secret.
gonna
get
redirect
uri
send
token
provid
get
you.
author
author
server
one
authent
you,
verifi
are.
also
know
scope
author
go
be.
token
issu
gonna
that,
know,
go
inform
interact
author
server
get
access.
grant
author
server.
token,
redirect
back
client
token,
can.
depend
type
token
given
you.
way,
token
time
limit,
right?
often
need
token
need
refreshed,
expire.
token
someth
allow
get
web
services.
apis,
instance.
architectur
pictur
fairli
detailed.
view
detail
architectur
diagram
one
compon
previou
pictur
around
web
server.
web
server
secur
pretti
well
documented.
got
sequenc
without
actual
activ
diagram.
abl
portray
components.
interactions,
know,
login
request.
get
response.
redirected.
redirect
thing
like
say
take
author
get
token.
sequenc
one
11
12
depict
here.
pretti
good
way
commun
multipl
levels.
compon
interact
sequenc
call
use?
case
help
solv
essenti
get
token
author
authent
time.
okay,
pictur
one.
paus
pictur
2.
see
optim
was?
pretty.
pretti
easy.
essenti
secur
proxi
cach
respond.
cach
it.
public,
key
cached,
next
time
request
come
go
back
ident
provider,
token
still
valid,
go
get
pretti
quickly.
again,
pictur
pretti
detailed.
evolution.
may
architectur
diagram
commun
audienc
stakeholders.
anoth
releas
come
up,
stuff
slow.
commun
architectur
pictur
even
engin
understand
implement
alright.
web
3
point
right?
almost
like
next.
alreadi
there.
semant
web
replaced.
web
2
side
right.
semant
web
replac
replac
aiml
models.
defin
inform
deep
person
relev
base
context.
point
web
2.0
web
3.0.
see
transit
happen
lot
time
need
actual
hardwar
connect
things.
gonna
find
way
connect
thing
base
mayb
presence.
almost
like
say
web
everywher
without
kind
softwar
deploy
somewhere.
hardwar
deploy
somewhere.
exampl
that.
see
second.
decentr
commun
well.
see
pain
point
2.0
architectur
evolut
3.0
come
tri
resolve.
now.
one
thing
go
essenti
without
author
everi
layer.
trust
someone.
base
compon
interact
per
se,
right?
blockchain
side
things.
improv
secur
architecture.
remov
lot
restrict
specif
softwar
run
specif
hardwar
components.
so.
know.
web
3
point
architectur
go
focu
on.
lot
that.
essenti
restrict
today.
use
case
gonna
run
through.
gonna
lead
us
i,
know
let
guy
go
interested.
essenti
web
2.0,
get
author
healthcar
company,
involved,
mani
piec
interact
give
prior
op
versu
component.
healthcar
back
end
system
mani
them,
mani
networks,
mani
differ
softwar
piec
commun
with.
want
turn
black
box.
remov
restrict
specif
hardwar
specif
softwar
blockchain.
see
mani
exampl
today.
know
are.
guess
thing
web
3.0
go
introduc
us
time.
kind
want
paus
lecture,
think
get
much
explain
much
blockchain.
anoth
lectur
brian
talk
replac
data
specif
lecture.
come
toward
last
last
coupl
lectures.
don't,
blockchain
lab
is,
slide
gonna
talk.
get
lot
detail.
know
questions.
lot
the,
know,
fungibl
even
real
thing
anymore,
opinion.
slide
littl
date
side.
why,
said,
lectur
gonna
bit
short.
want
paus
there.
see
guy
questions.
next
lab.

zak
seipel
01:00:27
guess
question
look
at.
one
paper.
look
like
one
firecrack
point.
anyth
miss
want
start
like
today?
lectur
thing
like
that.

mq
quraishi
01:00:44
think
so.
think
start
it.
youtub
video
talk
pretti
details.
start
standalone.
so,
next
step
due
softwar
architectur
code.
believe.

zak
seipel
01:01:00
yup,
yup,
alreadi
got
taken
care
of.
want
check
next
one.
thank
you.

mq
quraishi
01:01:07
alright,
folks,
said
was.
gonna
short
lectur
is.
thank
attend
good
luck
labs,
usual.
reach
discord
send
email
question
hopefully.
addressable.
know
gotten
back
spark
thing
yet
hopefully,
end
course,
give
enough
detail.
hard
collect
send
it.
still.
some.
list
thing
do.

zak
seipel
01:01:34
no,
don't,
no,
rush
that.
got
plenti
rust
relat
thing
need
time
take
care
right
now,
anyways.
thank
you.

mq
quraishi
01:01:41
worries,
thank
you.
alright.
see
guy
next
week.
good
luck
everything.

saima
islam
01:01:49
thank
you.
bye.
